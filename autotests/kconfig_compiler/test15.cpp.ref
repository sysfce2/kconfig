// This file is generated by kconfig_compiler_kf6 from test15.kcfg.
// All changes you do to this file will be lost.

#include "test15.h"

#include <qglobal.h>
#include <QFile>
#include <QQmlEngine>

class Test15Helper
{
  public:
    Test15Helper() : q(nullptr) {}
    ~Test15Helper() { delete q; q = nullptr; }
    Test15Helper(const Test15Helper&) = delete;
    Test15Helper& operator=(const Test15Helper&) = delete;
    Test15 *q;
};
Q_GLOBAL_STATIC(Test15Helper, s_globalTest15)
Test15 *Test15::self()
{
  if (!s_globalTest15()->q) {
    new Test15;
    s_globalTest15()->q->read();
  }

  return s_globalTest15()->q;
}

Test15 *Test15::create(QQmlEngine *, QJSEngine *)
{
  QQmlEngine::setObjectOwnership(self(), QQmlEngine::CppOwnership);
  return self();
}

Test15::Test15( )
  : KConfigSkeleton( QStringLiteral( "muondatasourcesrc" ) )
{
  Q_ASSERT(!s_globalTest15()->q);
  s_globalTest15()->q = this;
  KConfigCompilerSignallingItem::NotifyFunction notifyFunction = static_cast<KConfigCompilerSignallingItem::NotifyFunction>(&Test15::itemChanged);

  setCurrentGroup( QStringLiteral( "kamoso" ) );

  KConfigSkeleton::ItemUrl  *itemPicturesDir;
  itemPicturesDir = new KConfigSkeleton::ItemUrl( currentGroup(), QStringLiteral( "picturesDir" ), mPicturesDir );
  addItem( itemPicturesDir, QStringLiteral( "picturesDir" ) );
  KConfigCompilerSignallingItem  *itemBrightness;
  KConfigSkeleton::ItemDouble  *innerItemBrightness;
  innerItemBrightness = new KConfigSkeleton::ItemDouble( currentGroup(), QStringLiteral( "brightness" ), mBrightness );
  itemBrightness = new KConfigCompilerSignallingItem(innerItemBrightness, this, notifyFunction, signalBrightnessChanged);
  addItem( itemBrightness, QStringLiteral( "brightness" ) );
  KConfigSkeleton::ItemBool  *itemStartsWithUppercase;
  itemStartsWithUppercase = new KConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "StartsWithUppercase" ), mStartsWithUppercase );
  addItem( itemStartsWithUppercase, QStringLiteral( "StartsWithUppercase" ) );
}

Test15::~Test15()
{
  if (s_globalTest15.exists() && !s_globalTest15.isDestroyed()) {
    s_globalTest15()->q = nullptr;
  }
}


void Test15::itemChanged(quint64 signalFlag) {

  switch (signalFlag) {
  case signalBrightnessChanged:
    Q_EMIT brightnessChanged();
    break;
  }
}

#include "test15.moc"

